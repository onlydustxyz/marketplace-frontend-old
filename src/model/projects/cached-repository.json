[
  {
    "id": "493552406",
    "title": "protostar-vscode-test-adapter",
    "description": "vscode extension to view protostar tests in the Test Explorer.",
    "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter",
    "logo": "https://avatars.githubusercontent.com/u/98735558?v=4",
    "contributions": [
      {
        "id": "493552406000002",
        "title": "activate extension for protostar projects only",
        "description": "### User story \n\n### Details\n\nAs a user I want to activate the extension for protostar projects only so that it does not show when no test can be found\n\nThe presence of the `protostar.toml` file could be used as an indicator.\n\n### Acceptance Criteria\n- The test explorer view is shown the project is using protostar\n- The test explorer view is **not** shown if the project is **not** using protostar\n- In a multi-root workspace setup, the test tree only shows roots for protostar folders",
        "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter/issues/2",
        "status": "ASSIGNED",
        "gate": 0,
        "metadata": {
          "assignee": "0x26",
          "github_username": "ltoussaint",
          "difficulty": "easy",
          "technology": "js",
          "duration": "under a day",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "493552406000006",
        "title": "display test results",
        "description": "### User story \n\n### Details\nAs a user I want the test results to be displayed so that I can investigate issues.\n\nThe output of protostar command should be parsed to be displayed as logs of each unit test.\n\n### Acceptance Criteria\n- The logs are available in the test UI for success cases\n- The error details are available in the test UI for failed cases\n\n",
        "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter/issues/6",
        "status": "ASSIGNED",
        "gate": 0,
        "metadata": {
          "assignee": "0x27",
          "github_username": "toto",
          "difficulty": "easy",
          "technology": "js",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "493552406000007",
        "title": "highlight assertion failures in editor",
        "description": "### User story \n\n### Details\n\nAs a user I want the failing assert line to be highlighted so that I can easily spot the issue.\n\nUsing code lens we can highlight lines in the editor and provide details.\n\n### Acceptance Criteria\n- The assert line is highlighted in red when it fails\n- The assertion failure details are provided in-line in the editor\n\n",
        "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter/issues/7",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "js",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "493552406000009",
        "title": "smoother test results",
        "description": "### User story \n\n### Details\nAs a user I want to see my tests being updated as the execution progresses so that I can see the results in real-time.\n\nToday, protostar output is received as one single block when all tests are completed.\nIvestigation is needed to be able to send output, at least once per test to update the states regularly.\n\n### Acceptance Criteria\n- Tests results are being updated right after its execution, even if several tests are run at once\n\n",
        "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter/issues/9",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "hard",
          "technology": "js",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "493552406000018",
        "title": "add coverage comments in pull requests",
        "description": "### Details\nAs a contributor I want to see the code coverage results in my pull request comments so that it is easier to spot issues.\n\nSome github actions already provide those features: \n- https://github.com/marketplace/actions/jest-github-action\n\n### Acceptance Criteria\n- Code coverage summary table is added in the \"Conversation\" tab of the pull request\n- Un-covered lines of code are highlighted within the \"File changes\" tab of the pull request\n- ",
        "github_link": "https://github.com/onlydustxyz/protostar-vscode-test-adapter/issues/18",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": null,
          "duration": "under a day",
          "context": "isolated",
          "type": "test"
        }
      }
    ]
  },
  {
    "id": "481932781",
    "title": "starkonquest",
    "description": "An educational game to learn Cairo where you implement ship AIs that fight to catch as much dust as possible!",
    "github_link": "https://github.com/onlydustxyz/starkonquest",
    "logo": "https://avatars.githubusercontent.com/u/98735558?v=4",
    "contributions": [
      {
        "id": "481932781000030",
        "title": "Add end-to-end testing",
        "description": "### User story \r\n\r\nhttps://www.notion.so/onlydust/As-a-developer-I-want-to-test-my-application-end-to-end-13246b31021548a79bcafa9919f351cc\r\n\r\n### Description\r\n\r\nThe project already contains some unit tests, but it misses end-to-end tests.\r\nAs a developer, I want to know if everything is working well together, without the need to deploy & test manually.\r\n\r\nWrite a protostar test that will actually deploy all contracts and test the tournament from an end-user perspective.\r\n\r\n### Acceptance Criteria\r\n\r\n- the test must be deterministic. Random-generator contract will have to be mocked for this reason.\r\n- the test must deploy and run an entire tournament with 2 ships per battle, 8 ships in total and a grid size of 10. \r\n- you may use basic_ship and/or static_ship implementations in the test. You may also implement a specific ship for the test, if you feel it is needed.\r\n- the test must assert the stage of the tournament is correct at each step.\r\n- the test must assert who the winner is.",
        "github_link": "https://github.com/onlydustxyz/starkonquest/issues/30",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "cairo",
          "duration": "few days",
          "context": "coupled",
          "type": "test"
        }
      },
      {
        "id": "481932781000043",
        "title": "Create account for players",
        "description": "### User story \r\n\r\n\r\n### Details\r\n\r\nAs a player, I want to have an account keeping data about me.\r\n\r\nPlayers should be able to create an account on-chain that will store their:\r\n- nickname\r\n- won tournament count\r\n- lost tournament count\r\n- won battle count\r\n- lost battle count\r\n\r\nThe account will probably contains more data in the future, so the solution should be extensible.\r\nWhen a player registers a ship, the tournament contract checks he owns an account.\r\n\r\n### Acceptance Criteria\r\n\r\n- accounts must be managed by a specific contract (might be a NFT)\r\n- the tournament checks player account when a ship is registered\r\n- won/lost tournament/battle count is well updated every time a tournament runs\r\n- there must be some documentation describing how to create an account\r\n- it must be thoroughly tested",
        "github_link": "https://github.com/onlydustxyz/starkonquest/issues/43",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "cairo",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "481932781000051",
        "title": "Get battle transaction hash per round and battle index",
        "description": "### User story \r\n\r\n\r\n### Details\r\n\r\nAs a player, I want to be able to replay battles in the UI.\r\n\r\nThe frontend needs the transaction hash of a battle to be able to retrieve corresponding events and replay it.\r\n\r\nCurrently, the tournament provides a basic view function to retrieve the transaction hash of a battle by index. It would be simpler for the frontend to be able to retrieve it by round number + battle index within the round.\r\n\r\n### Acceptance Criteria\r\n\r\n- a new view `round_battle_transaction_hash` function has been added. It takes two arguments `round` and `index`, and returns the transaction hash.\r\n- some checks have been added in tests to assert this is working ",
        "github_link": "https://github.com/onlydustxyz/starkonquest/issues/51",
        "status": "OPEN",
        "gate": 2,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "cairo",
          "duration": "under a day",
          "context": "coupled",
          "type": "feature"
        }
      }
    ]
  },
  {
    "id": "420209573",
    "title": "briq-builder",
    "description": "DApp to build with briqs",
    "github_link": "https://github.com/briqNFT/briq-builder",
    "logo": "https://avatars.githubusercontent.com/u/92080563?v=4",
    "contributions": [
      {
        "id": "420209573000023",
        "title": "As a user I want to place multiple briqs when holding down my click",
        "description": "###User story\r\nAs a user I want to click & hold to place multiple briqs on the canvas, like “spraying”\r\n\r\n###Test\r\nGIVEN I am on the builder AND I am in “place mode”\r\nWHEN I click & hold the left-click\r\nTHEN I can place multiple briqs\r\n\r\n###References\r\nExactly like magica voxel does it",
        "github_link": "https://github.com/briqNFT/briq-builder/issues/23",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "weeks",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "420209573000024",
        "title": "As a briq user I want to import NFTs that I own on Ethereum and \"briqify\" them",
        "description": "### User story \r\n\r\nAs a user I want to have a briq version of my NFT\r\n\r\n### Test\r\nGIVEN I have connected my Metamask wallet to the app AND I have a compatible NFT\r\nWHEN I choose a compatible NFT\r\nTHEN I get a briqified version of it on the builder I can mint\r\n\r\n### References\r\nhttps://github.com/Blackyugin/gotchibriqbuilder",
        "github_link": "https://github.com/briqNFT/briq-builder/issues/24",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "weeks",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "420209573000025",
        "title": "As a user I want to paint briqs I have already selected",
        "description": "### User story \r\n\r\nAs a user I want to be able to select and paint the selected briqs\r\n\r\n\r\n### Test\r\nGIVEN I am on the briq builder AND I have selected briqs\r\nWHEN I choose a color\r\nTHEN all the selected briqs change color",
        "github_link": "https://github.com/briqNFT/briq-builder/issues/25",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "weeks",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "420209573000026",
        "title": "As a user I want to create symmetrical constructions with a mirror mode",
        "description": "\r\n### User story \r\nAs a user I want to create symmetrical constructions on the X/Y/Z axis to build more quickly\r\n\r\n### Test\r\nGIVEN I am on the briq builder AND I have selected the mirror construction\r\nWHEN I place a briq\r\nTHEN it is also mirrored on the X/Y/Z axis\r\n\r\n### References\r\nhttps://nimadez.github.io/voxel-builder/\r\n has a nice mirror mode, Magica Voxel has too",
        "github_link": "https://github.com/briqNFT/briq-builder/issues/26",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "weeks",
          "context": "isolated",
          "type": "feature"
        }
      }
    ]
  },
  {
    "id": "486660536",
    "title": "generator-starknet",
    "description": "This is a development platform to quickly generate, develop & deploy smart contract based applications on StarkNet.",
    "github_link": "https://github.com/onlydustxyz/generator-starknet",
    "logo": "https://avatars.githubusercontent.com/u/98735558?v=4",
    "contributions": [
      {
        "id": "486660536000004",
        "title": "Implement yeoman based unit tests.",
        "description": "# Description\r\n\r\nThe project has no unit tests. \r\nAs a user, I want to use a project that is battled tested.\r\n\r\nSee https://yeoman.io/authoring/testing.html for implementation guidelines.\r\n\r\n# Acceptance criteria\r\n\r\n- unit tests are implemented\r\n- correct test coverage is ensured\r\n\r\n# Technical guidance\r\n\r\nIf you are new to Yeoman framework you can find useful documentation here: https://yeoman.io/authoring/testing.html\r\n\r\nWith Yeoman test helpers you can easily mock user interactions in unit testing.\r\nMock interaction example:\r\n\r\n```javascript\r\n  return helpers.run(path.join(__dirname, '../app'))\r\n    .withOptions({ foo: 'bar' })      // Mock options passed in\r\n    .withArguments(['name-x'])        // Mock the arguments\r\n    .withPrompts({ coffee: false })   // Mock the prompt answers\r\n    .withLocalConfig({ lang: 'en' }) // Mock the local config\r\n    .then(function() {\r\n      // assert something about the generator\r\n    });\r\n```\r\n\r\nAnother important aspect of tests are the assertions.\r\nFirst you should ensure that the files are correctly generated by the generator.\r\nYou can do assertion like this:\r\n\r\n```javascript\r\nassert.file('common/file.txt');\r\n```",
        "github_link": "https://github.com/onlydustxyz/generator-starknet/issues/4",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "js",
          "duration": "few days",
          "context": "coupled",
          "type": "test"
        }
      },
      {
        "id": "486660536000023",
        "title": "Generate deployment scripts for Hardhat",
        "description": "## Description\r\n\r\nAs a developer, I would like to have deploy scripts generated for my project.\r\n\r\nThe deployment is an important part of the development lifecycle, hence it would improve the dev UX if the generator could prepare deployment scripts.\r\n\r\n## Acceptance criteria\r\n\r\n- A new confirm choice is proposed to the user to choose whether or not to generate the deployment scripts\r\n- Deployment scripts are generated and working with Hardhat\r\n",
        "github_link": "https://github.com/onlydustxyz/generator-starknet/issues/23",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      },
      {
        "id": "486660536000025",
        "title": "Generate CI workflows for Hardhat (Github actions)",
        "description": "## Description\r\n\r\nAs a developer, I would like to have CI workflows generated for my project.\r\n\r\nThe continuous integration is an important part of the development lifecycle, hence it would improve the dev UX if the generator could prepare CI workflows.\r\n\r\n## Acceptance criteria\r\n\r\n- A new confirm choice is proposed to the user to choose whether or not to generate the CI files\r\n- CI files are generated and working with Hardhat and Github actions\r\n",
        "github_link": "https://github.com/onlydustxyz/generator-starknet/issues/25",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "few days",
          "context": "isolated",
          "type": "build"
        }
      }
    ]
  },
  {
    "id": "480776993",
    "title": "starklings",
    "description": "An interactive tutorial to get you up and running with Starknet",
    "github_link": "https://github.com/onlydustxyz/starklings",
    "logo": "https://avatars.githubusercontent.com/u/98735558?v=4",
    "contributions": [
      {
        "id": "480776993000181",
        "title": "VSCode extension to automatically move on to the next exercise",
        "description": "",
        "github_link": "https://github.com/onlydustxyz/starklings/issues/181",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "hard",
          "technology": "python",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      },
      {
        "id": "480776993000190",
        "title": "add content on how to generate and verify a cairo proof",
        "description": "At this point we understand the concept of ZKproof but nobody actually generated and verified a proof for real.\r\nWe need to create some sort of content, not necessary an exercise, to teach people how to do it.",
        "github_link": "https://github.com/onlydustxyz/starklings/issues/190",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "hard",
          "technology": null,
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "480776993000178",
        "title": "Look for a way to interact with the user in watch mode",
        "description": "https://github.com/Textualize/textual ?",
        "github_link": "https://github.com/onlydustxyz/starklings/issues/178",
        "status": "COMPLETED",
        "gate": 0,
        "metadata": {
          "assignee": "000000000000000000000000000000000000000000000000000000000000002B",
          "github_username": "ofux",
          "difficulty": "hard",
          "technology": "python",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      }
    ]
  },
  {
    "id": "491431479",
    "title": "uraeus",
    "description": "Command line utilities to check StarkNet contracts written in Cairo.",
    "github_link": "https://github.com/onlydustxyz/uraeus",
    "logo": "https://avatars.githubusercontent.com/u/98735558?v=4",
    "contributions": [
      {
        "id": "491431479000014",
        "title": "Implement unit tests.",
        "description": "## Description\r\n\r\nWe need to implement unit tests and have a correct coverage.\r\n\r\nLikely that will involve to change the design of the code since it relies heavily on command line run by the Rust code. We need an elegant way to mock the result of execution of those commands.\r\n\r\n## Acceptance criteria\r\n\r\n- Architecture of the code is \"mock friendly\"\r\n- Unit tests are implemented\r\n- Sufficient code coverage is reached",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/14",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "rust",
          "duration": "few days",
          "context": "intricated",
          "type": "refactor"
        }
      },
      {
        "id": "491431479000015",
        "title": "Configurable network through CLI argument.",
        "description": "## Description\r\n\r\nCurrently, the program uses a hardcoded value for the network. Hence it is only possible to verify contracts deployed on Goerli.\r\n\r\nWe need a way to switch the network through a new CLI argument.\r\n\r\n## Acceptance criteria\r\n\r\n- `--network` CLI arg is created\r\n- The network used is configured based on the CLI argument value\r\n- Proper validation of possible values are done\r\n- Documentation is updated to reflect the change\r\n- Tests are created to test the new argument",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/15",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "rust",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      },
      {
        "id": "491431479000016",
        "title": "Detect if requirements are installed",
        "description": "## Description\r\n\r\nWe should properly detect and gracefully shutdown if some requirements are not installed.\r\n\r\nCurrently the program panicks if a requirement is not installed. \r\n\r\nFor exemple, without `starknet` CLI available we get this error:\r\n\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', src/starknet.rs:17:39\r\n```",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/16",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "rust",
          "duration": "under a day",
          "context": "coupled",
          "type": "feature"
        }
      },
      {
        "id": "491431479000018",
        "title": "Parallelize tasks",
        "description": "## Description\r\n\r\nCurrently, the main tasks of the code verification are done sequentially.\r\n\r\nWe could optimize and do some tasks in parallel.\r\n\r\nThe main tasks are the following:\r\n\r\n1.  parse CLI configuration\r\n2.a. compile the contracts\r\n2.b parse the compilation result\r\n3.a get the deployed bytecode\r\n3.b parse the result of the get_code response\r\n4. compare the results\r\n\r\nWe could transform to the following:\r\n- Run 1.\r\n- Run 2.a and 3.a in //\r\n- Run 2.b when 2.a is done and 3.b when 3.a is done\r\n- Wait for 2.b and 3.b\r\n- Run 4.\r\n\r\n## Acceptance criteria\r\n\r\n- Tasks are done asynchronously\r\n- Tasks are parallelised when possible\r\n",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/18",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "rust",
          "duration": "few days",
          "context": "intricated",
          "type": "performance"
        }
      },
      {
        "id": "491431479000019",
        "title": "Implement a mode that use starknet_getCode RPC endpoint to get the deployed bytecode",
        "description": "## Description\r\n\r\nThe retrieval of the deployed byte code is done through `starknet get_code` command line.\r\n\r\nIt would be great if the user could choose to use `starknet_getCode` instead of the CLI to get the byte code.\r\n\r\n## Acceptance criteria\r\n\r\n- Code is made more generic to switch between different implementations using Rust `Traits`\r\n- A new implementation use `starknet_getCode` to get the byte code\r\n- The user can switch between the CLI and the RPC endpoint with command line arguments\r\n- New CLI arguments are added\r\n- A new flag is added to choose the RPC endpoint root in case of RPC mode is selected",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/19",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "rust",
          "duration": "few days",
          "context": "intricated",
          "type": "feature"
        }
      },
      {
        "id": "491431479000020",
        "title": "Implement HTTP server binary",
        "description": "## Description\r\n\r\nThe verification service is provided through command line.\r\n\r\nWe could expose this service through an HTTP endpoint to enable certain use cases.\r\n\r\n## Acceptance criteria\r\n\r\n- A new binary is implemented\r\n- It exposes the verification service through a Rest API\r\n- The command line and the http service use the same shared code for the core task",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/20",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": "rust",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "491431479000022",
        "title": "Automatic dependencies installation after project generation",
        "description": "## Description\r\n\r\nAs a developer, it would help if the generator could propose to automatically install dependencies of the generated project for my specific configuration.\r\n\r\n## Acceptance criteria\r\n\r\n- The user can choose whether or not to perform the automatic installation of dependencies\r\n- The generator installs all required dependencies and prompt the user when done",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/22",
        "status": "OPEN",
        "gate": 2,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "js",
          "duration": "few days",
          "context": "isolated",
          "type": "feature"
        }
      },
      {
        "id": "491431479000023",
        "title": "Write Rust documentation",
        "description": "## Description\r\n\r\nWe need some user documentation. Rust documentation is great and well integrated in tooling.\r\n\r\nWe should comply to Rust standards for our documentation.\r\n\r\n## Acceptance criteria\r\n\r\n- All important functions and part of the codes are well documented\r\n- Rust standards are matched\r\n- Documentation includes code samples",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/23",
        "status": "OPEN",
        "gate": 2,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "easy",
          "technology": null,
          "duration": "few days",
          "context": "coupled",
          "type": "documentation"
        }
      },
      {
        "id": "491431479000024",
        "title": "Implement a code similarity metric",
        "description": "## Description\r\n\r\nCurrently the code verification is binary, either it matches a deployed byte code or not.\r\n\r\nPerhaps it could be useful to measure the similarity degree between a source code and a deployed byte code.\r\n\r\n## Acceptance criteria\r\n\r\n- A new mode enable to measure the similarity degree\r\n- The similarity degree is computed and prompted to the user\r\n- Optional: a similarity report is generated ",
        "github_link": "https://github.com/onlydustxyz/uraeus/issues/24",
        "status": "OPEN",
        "gate": 2,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "hard",
          "technology": "rust",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      }
    ]
  },
  {
    "id": "457388175",
    "title": "astraly-contracts",
    "description": "Astraly Cairo Contracts",
    "github_link": "https://github.com/ZkPad-Labs/astraly-contracts",
    "logo": "https://avatars.githubusercontent.com/u/100468439?v=4",
    "contributions": [
      {
        "id": "457388175000022",
        "title": "Refractor testing suite to use Protostar",
        "description": "### Description\r\n\r\nMotivated by [this](https://github.com/onlydustxyz/protostar-vs-nile) article.\r\nRefractor the whole test suite with [protostar](https://docs.swmansion.com/protostar/) which is currently written in python using `pytest`.\r\n\r\n### Acceptance Criteria\r\n\r\nTest coverage should be just as high as in the current version.\r\n",
        "github_link": "https://github.com/ZkPad-Labs/astraly-contracts/issues/22",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "cairo",
          "duration": "weeks",
          "context": "intricated",
          "type": "refactor"
        }
      },
      {
        "id": "457388175000024",
        "title": "Create & Design Investment Strategies",
        "description": "### Description\r\n\r\nDesign new investment strategies that could be used by the `ZkPadStaking` vault.\r\nInvestment strategies are simply smart contracts that use part of the vault holding which is composed of ZKP and ZKP-LP tokens to generate yield throughout other DeFi protocols.\r\nStrategies can get as technical and complex as possible, although it's best to focus on battle-tested protocols.\r\n\r\n### Acceptance Criteria\r\n\r\nA strategy should at least include the following functions : \r\n```cairo\r\n@view\r\nfunc underlying{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}() -> (\r\n    address : felt\r\n):\r\nend\r\n\r\n@external\r\nfunc mint{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(amount : Uint256) -> (\r\n    res : Uint256\r\n):\r\nend\r\n\r\n@external\r\nfunc redeemUnderlying{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(\r\n    amount : Uint256\r\n) -> (res : Uint256):\r\nend\r\n\r\n@external\r\nfunc balanceOfUnderlying{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(user : felt) -> (\r\n    res : Uint256\r\n):\r\nend\r\n```",
        "github_link": "https://github.com/ZkPad-Labs/astraly-contracts/issues/24",
        "status": "OPEN",
        "gate": 0,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "cairo",
          "duration": "few days",
          "context": "coupled",
          "type": "feature"
        }
      },
      {
        "id": "457388175000025",
        "title": "Refactor scripts to be more concise",
        "description": "### Description\r\n\r\nCurrently written scripts are a bit cumbersome to navigate into. \r\nWould be great to refractor them perhaps by doing a PR to `nile` to improve their `nre` object.\r\nAlso implementing the following [PR](https://github.com/Openzeppelin/nile/pull/122) would be great to run multiple txs at once in a `nile run` script.\r\n\r\n### Acceptance Criteria\r\n\r\nScripts should run correctly on a local devnet.",
        "github_link": "https://github.com/ZkPad-Labs/astraly-contracts/issues/25",
        "status": "OPEN",
        "gate": 1,
        "metadata": {
          "assignee": null,
          "github_username": null,
          "difficulty": "intermediate",
          "technology": "python",
          "duration": "few days",
          "context": "isolated",
          "type": "refactor"
        }
      }
    ]
  }
]
